// This file is @generated by prost-build.
/// Well-known SUID for use by all clients.
/// All other Sensor UIDs must be discovered dynamically
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SnsSuidSensor {
    /// \[default = 0xabababababababab\];
    #[prost(fixed64, tag = "1")]
    pub suid_low: u64,
    /// \[default = 0xabababababababab\];
    #[prost(fixed64, tag = "2")]
    pub suid_high: u64,
}
/// Request sent by internal or external client for the list of SUIDs that
/// advertise the specified Data Type
/// Note: Additional requests arriving on the same connection, will not result
/// in a replaced request, but instead the new request will be appended to any
/// active registrations.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SnsSuidReq {
    #[prost(string, optional, tag = "1")]
    pub data_type: ::core::option::Option<::prost::alloc::string::String>,
    /// Register for updates to the list of SUIDs advertising data_type
    #[prost(bool, optional, tag = "2")]
    pub register_updates: ::core::option::Option<bool>,
    /// Each datatype has one sensor configured to be "default". If following
    /// field is set to true, only the SUID of the default sensor will be
    /// sent via the suid event
    /// \[default = true\];
    #[prost(bool, optional, tag = "3")]
    pub default_only: ::core::option::Option<bool>,
}
/// Event specifying the list of SUIDs associated with the given Data Type
/// Receipt of this event indicates that a change to this list has occurred
/// since the previous event.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnsSuidEvent {
    #[prost(string, optional, tag = "1")]
    pub data_type: ::core::option::Option<::prost::alloc::string::String>,
    /// pb3中, 如果源的proto使用了package, 则上面单纯import是不够的
    /// 使用时要完整的层级
    #[prost(message, repeated, tag = "2")]
    pub suid: ::prost::alloc::vec::Vec<super::sns_std_type::SnsStdSuid>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SnsSuidMsgid {
    /// option (nanopb_enumopt).long_names = false;
    SnsSuidReq = 0,
    SnsSuidEvent = 1,
}
impl SnsSuidMsgid {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SnsSuidReq => "SNS_SUID_MSGID_SNS_SUID_REQ",
            Self::SnsSuidEvent => "SNS_SUID_MSGID_SNS_SUID_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SNS_SUID_MSGID_SNS_SUID_REQ" => Some(Self::SnsSuidReq),
            "SNS_SUID_MSGID_SNS_SUID_EVENT" => Some(Self::SnsSuidEvent),
            _ => None,
        }
    }
}
